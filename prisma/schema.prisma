datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Gender {
  MALE
  FEMALE
}

enum AppType {
  BACHELORS
  MASTERS
}

enum AppStatus {
  APPLIED
  IN_REVIEW
  ACCEPTED
  WAITLISTED
  REJECTED
}

enum InterviewStatus {
  NO_INTERVIEW
  PENDING
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PAID
  UNPAID
}

enum Semester {
  FALL
  SPRING
}

enum TestType {
  IELTS
  TOPIK
  SAT
}

enum PaymentMethod {
  CARD
  CASH
}

enum TranslationStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum DocumentType {
  PASSPORT
  MOTHER_PASSPORT
  FATHER_PASSPORT
  TRANSCRIPT
}

model User {
  id       String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fullname String @default("John Doe")
  email    String @unique
  password String

  role Role @default(USER)

  profile              Profile?
  family               Family?
  applications         Application[]
  favoriteUniversities FavoriteUniversity[]
  documents            Document[]
  education            Education?
  testScores           TestScores[]
  contracts            Contract[]
  archive              Archive[]
  translations         Translation[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([id])
  @@index([createdAt])
}

model Profile {
  id                String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName         String
  middleName        String?
  lastName          String
  birthDate         DateTime
  region            String
  passportNumber    String   @unique
  passportGivenDate DateTime
  passportEndDate   DateTime
  photo             String?
  address1          String?
  address2          String?
  phone             String
  gender            Gender

  countryId String  @db.Uuid
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  userId String @unique @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([id])
  @@index([phone])
}

model Family {
  id                   String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fatherFirstName      String?
  fatherLastName       String?
  fatherBirthDate      DateTime?
  fatherPassportNumber String?
  fatherPhone          String?
  fatherOccupation     String?
  motherFirstName      String?
  motherLastName       String?
  motherBirthDate      DateTime?
  motherPassportNumber String?
  motherPhone          String?
  motherOccupation     String?

  userId String @unique @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([id])
}

model Education {
  id             String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  schoolName     String
  entryDate      DateTime?
  graduationDate DateTime?

  userId String @unique @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([id])
}

model TestScores {
  id         String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type       TestType
  score      Decimal
  submitDate DateTime
  upload     String

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  visaId String @db.Uuid
  visa   Visa   @relation(fields: [visaId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([id])
}

model Country {
  id   String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @unique

  profiles     Profile[]
  universities University[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id])
}

model University {
  id               String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  photos           String[]
  name             String   @unique
  longDescription  String
  shortDescription String
  address          String
  websiteUrl       String

  countryId String  @db.Uuid
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  programs     Program[]
  applications Application[]
  favorites    FavoriteUniversity[]
  visaApps     Visa[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([id])
  @@index([name])
  @@index([countryId])
}

model Program {
  id          String  @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?

  universityId String     @db.Uuid
  university   University @relation(fields: [universityId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  applications Application[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([id])
  @@index([name])
  @@index([universityId])
}

model Application {
  id String @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  universityId String     @db.Uuid
  university   University @relation(fields: [universityId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  programId String  @db.Uuid
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  appStatus AppStatus
  semester  Semester @default(FALL)
  appType   AppType @default(BACHELORS)

  interviewStatus InterviewStatus @default(NO_INTERVIEW)

  paymentAmount Int @default(1000)
  paymentStatus PaymentStatus @default(UNPAID)

  createdBy String @default("someone")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([id])
  @@index([userId])
  @@index([universityId])
  @@index([programId])
  @@index([universityId, programId])
  @@index([appStatus])
}

model Document {
  id     String       @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type   DocumentType @default(TRANSCRIPT)
  upload String       @default("test.jpg") 

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdBy String @default("someone")

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  @@id([id])
  @@index([type, userId])
}

model FavoriteUniversity {
  id           String     @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String     @db.Uuid
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  universityId String     @db.Uuid
  university   University @relation(fields: [universityId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([id])
}

model Contract {
  id String @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  price         Int
  paymentStatus PaymentStatus
  paid          Int
  paymentMethod PaymentMethod
  upload        String

  appID String

  createdBy String 

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([id])
}

model Archive {
  id String @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  reason           String
  responsibleStaff String

  createdAt DateTime @default(now())

  @@id([id])
}

model Translation {
  id String @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  sentDate     DateTime
  expectedDate DateTime
  comment      String?

  status TranslationStatus

  createdBy String 

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([id])
}

model Visa {
  id String @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  universityId String     @db.Uuid
  university   University @relation(fields: [universityId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  testScores TestScores[]

  acceptanceLetter String

  createdBy String 

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([id])
}
